{{ ansible_managed | comment(decoration='" ') }}
" Powerline settings
"
" Quote this if statement, so that it's commented AND to not have the if
" remove the newline
"{% if powerline_enabled %}"
let g:powerline_pycmd="py3"
python3 sys.path.append('{{ powerline_site_packages_dir }}')
python3 from powerline.vim import setup as powerline_setup
python3 powerline_setup()
python3 del powerline_setup
"{% endif %}"

set nocompatible
filetype off

" Install vim-plug
if empty(glob('~/.vim/autoload/plug.vim'))
  silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs
    \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
endif

" Run PlugInstall if there are missing plugins
autocmd VimEnter * if len(filter(values(g:plugs), '!isdirectory(v:val.dir)'))
  \| PlugInstall --sync | source $MYVIMRC
\| endif

" Specify a directory for plugins
" - For Neovim: stdpath('data') . '/plugged'
" - Avoid using standard Vim directory names like 'plugin'
call plug#begin('~/.vim/plugged')

" Sensible settings
Plug 'tpope/vim-sensible'

" Ansible
Plug 'pearofducks/ansible-vim'

" ALE syntax checkers and linters
Plug 'w0rp/ale'

" Coc LSP client
Plug 'neoclide/coc.nvim', {'branch': 'release'}

"Git gutter
Plug 'airblade/vim-gitgutter'

" LaTeX
Plug 'vim-latex/vim-latex'

" Rust
Plug 'rust-lang/rust.vim'

" WebAPI
Plug 'mattn/webapi-vim'

" Gist
Plug 'mattn/gist-vim'

" Html5
Plug 'othree/html5.vim'

" js
Plug 'othree/yajs.vim'

"Editorconfig support
Plug 'editorconfig/editorconfig-vim'

" Camil's Clean plugin
Plug 'camilstaps/vim-clean'

" Camil's BB-script highlighter
Plug 'camilstaps/vim-bb'

" Fugitive for git
Plug 'tpope/vim-fugitive'

" :FixWhitespace
Plug 'bronson/vim-trailing-whitespace'

" Surround.vim
Plug 'tpope/vim-surround'

" NERD tree
Plug 'scrooloose/nerdtree'

" NERD-tree git plugin
Plug 'Xuyuanp/nerdtree-git-plugin'

" tmux.conf
Plug 'tmux-plugins/vim-tmux'

" Commentary
Plug 'tpope/vim-commentary'

" Toml
Plug 'cespare/vim-toml'

" Jinja2
Plug 'glench/vim-jinja2-syntax'

" Markdown
Plug 'godlygeek/tabular'
Plug 'plasticboy/vim-markdown'

call plug#end()

filetype plugin indent on

" Own settings
" ------------------
"  Text formatting
" ------------------

set autoindent                  " Autoindent newlines
set autowrite                   " autosave on :make
set smartindent
inoremap # X<BS>#
set nowrap                      " Don't wrap lines
set softtabstop=4
set shiftwidth=4
set tabstop=4                   " 4-space tab
set expandtab
set virtualedit=block           " Allow virtual edit in block mode

" --------------------
"  Remapping
" --------------------

" lead with ,
let mapleader=","

" reflow with Q in normal and visual mode
nnoremap Q gqap
nnoremap Q gp

" sane movement with wrap on
nnoremap j gj
nnoremap k gk
vnoremap j gj
vnoremap k gk

nnoremap <Down> gj
nnoremap <Up> gk
vnoremap <Down> gj
vnoremap <Up> gk
inoremap <Down> <C-o>gj
inoremap <Up> <C-o>gk

" ----------------------
"  UI
" ----------------------
set hidden                      " Don't abandon hidden buffers
set noshowcmd                   " don't display incomplete commands
set nolazyredraw                " don't do this
set number                      " Linenos
set wildmode=list:longest,full
set ch=1                        " cli height
set whichwrap+=<,>,h,l,[,]      " backspace and cursor keys wrap to
set shortmess=filtIoOac         " shorten messages
set report=0                    " tell us about changes
set nostartofline               " don't jump to start of line when scrolling
set esckeys                     " allow cursor keys in insert mode
set foldenable
set foldlevel=2
" set foldlevelstart=2          " sets foldlevel when editing a new buffer
set foldmethod=syntax           " markers are used to specify folds
set foldminlines=0              " allow folding single lines
set foldnestmax=3               " max vold nesting
set formatoptions=
set formatoptions+=n            " Support for numbered/bullet lists
set formatoptions+=c            " format comments
set formatoptions+=r            " continue comments by default
set formatoptions+=o            " make comments when using o or O from comment line
set formatoptions+=q            " format comment with gp
set formatoptions+=n            " recognize numbered lists
set formatoptions+=2            " Use indent from second line of a paragraph
set formatoptions+=l            " Don't break long lines that were already long
set formatoptions+=1            " break before 1-letter words
set formatoptions+=j            " Delete comment character when joining commented lines
set history=1000                " long history
set hlsearch                    " highlight searches
set ignorecase                  " Ignore case of search
set incsearch                   " search as pattern is typed
set magic                       " extended regexes
set mouse=a                     " enable mouse always
set noerrorbells                " no bell
set nojoinspaces                " only insert ingle space after a '.', '?' and '! with join cmd
set title                       " show title in window titlebar
set ttyfast                     " Fast tty: send more characters at a time
set undofile                    " Persistent undo
set updatetime=300              " Faster updates
set visualbell                  " don't use audible bell
set wildchar=<TAB>              " Use tab for cli expansion
set wildignore+=*.jpg,*.png,*.gif,*.psd,*.o,*.obj,*.min,*.pyc,*.min.js,*.out,*.gz,*.gpg,*.tar.*
set wildignore+=*/vendor/*,*/node_modules/*,*/.git/*,*/.svn/*,*/.sass-cache/*,*/log/*,*/tmp/*,*/build/*
" Ignore these files
set suffixes=.bak,~,.swo,.swp,.o,.d,.info,.aux,.log,.dvi,.pdf,.bbl,.bin,.blg,.brf,.cb,.dmg,.ind,.idx,.ilg,.inx,.out,.toc,.pyc,.pyo,.pyd,.dll,.prj,.prp

" Always show the signcolumn, otherwise it would shift the text each time
" diagnostics appear/become resolved.
if has("patch-8.1.1564")
  " Recently vim can merge signcolumn and number column into one
  set signcolumn=number
else
  set signcolumn=yes
endif

" Vim-only
if !has('nvim')
    set ttymouse=xterm          " Mouse type=xterm
endif

" --------------------------------------

" Sudo write (,W)
noremap <leader>W :w !sudo tee %<CR>

" Remap :W to :w
command W w

" Toggle show tabs and trailing spaces (,c)
set lcs=tab:›\ ,trail:·,eol:¬,nbsp:_
set fcs=fold:-
nnoremap <silent> <leader>c :set nolist!<CR>

" Indent/unindent block (,]) (,[)
nnoremap <leader>] >i{<CR>
nnoremap <leader>[ <i{<CR>

" Toggle folds (<Space>)
nnoremap <silent> <space> :exe 'silent! normal! '.((foldclosed('.')>0)? 'zMzx' : 'zc')<CR>

" Fix page up and down
map <PageUp> <C-U>
map <PageDown> <C-D>
imap <PageUp> <C-O><C-U>
imap <PageDown> <C-O><C-D>

" Restore cursor position
autocmd BufReadPost *
  \ if line("'\"") > 1 && line("'\"") <= line("$") |
  \   exe "normal! g`\"" |
  \ endif

" LaTeX settings
set grepprg=grep\ -nH\ $*
let g:tex_flavor='latex'
let g:Tex_MultipleCompileFormats = 'pdf,dvi'
let g:Tex_DefaultTargetFormat    = 'pdf'
let g:Tex_CompileRule_pdf = 'latexmk -pdf -bibtex $*'
let g:Tex_Diacritics = 0

" spellang
set spelllang=en_gb
map <silent> <C-p> :setlocal invspell<CR>
imap <silent> <C-p> <ESC>:setlocal invspell<CR>a

" Gist settings
let g:gist_clip_command="xsel --input --clipboard"
let g:gist_detect_filetype=1

" ----------------------------------------
"  Visual cues
" ----------------------------------------

set showmatch                           " matching brackets
set mat=5
set laststatus=2                        " Always show the status line

" ---------------------------------------
"  Strip trailing whitespace
" ---------------------------------------
map <leader>ss :FixWhitespace<CR>

" --------------------------------------
" swapfiles
" --------------------------------------
" Local dirs
set backupdir=~/.vim/backups
set directory=~/.vim/swaps
set undodir=~/.vim/undo

" --------------------------------------
" Theme
" --------------------------------------
syntax enable
colorscheme default
set background=dark


" -----------------------------------
" pastebin
" -----------------------------------
let g:pastebin_api_dev_key = "8f0cbc6cf0dd0c11d39e13ab896809cb"


" ---------------------------------------------
" Append modeline after last line in buffer.
" ---------------------------------------------
" Use substitute() instead of printf() to handle '%%s' modeline in LaTeX
" files.
function! AppendModeline()
  let l:modeline = printf(" vim: set ft=%s ts=%d sw=%d tw=%d %set :",
        \ &filetype, &tabstop, &shiftwidth, &textwidth, &expandtab ? '' : 'no')
  let l:modeline = substitute(&commentstring, "%s", l:modeline, "")
  call append(line("$"), l:modeline)
endfunction
nnoremap <silent> <Leader>ml :call AppendModeline()<CR>

" ----------------------------------
"  Rust
" ----------------------------------
let g:rustfmt_autosave = 0
let g:rust_clip_command = 'xclip -selection clipboard'

" ----------------------------------
"  NERD tree
" ----------------------------------

" Ctrl+N for NERD tree
map <C-n> :NERDTreeToggle<CR>

" Close vim if NERDtree is only remaining file
autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTree") && b:NERDTree.isTabTree()) | q | endif

" Open NERDtree automatically if opening folder
autocmd StdinReadPre * let s:std_in=1
autocmd VimEnter * if argc() == 1 && isdirectory(argv()[0]) && !exists("s:std_in") | exe 'NERDTree' argv()[0] | wincmd p | ene | endif

" --------------------------------
" Markdown settings
" --------------------------------

let g:vim_markdown_math = 1
let g:vim_markdown_frontmatter = 1
let g:vim_markdown_toml_frontmatter = 1
let g:vim_markdown_strikethrough = 1
let g:vim_markdown_fenced_languages = ['c++=cpp', 'viml=vim', 'bash=sh', 'ini=dosini', 'csharp=cs', 'rust=rust', 'c=c']

""" coc.nvim settings
" Use tab for trigger completion with characters ahead and navigate.
" NOTE: Use command ':verbose imap <tab>' to make sure tab is not mapped by
" other plugin before putting this into your config.
inoremap <silent><expr> <TAB>
      \ pumvisible() ? "\<C-n>" :
      \ <SID>check_back_space() ? "\<TAB>" :
      \ coc#refresh()
inoremap <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<C-h>"

function! s:check_back_space() abort
  let col = col('.') - 1
  return !col || getline('.')[col - 1]  =~# '\s'
endfunction

" Use <c-space> to trigger completion.
if has('nvim')
  inoremap <silent><expr> <c-space> coc#refresh()
else
  inoremap <silent><expr> <c-@> coc#refresh()
endif

" Make <CR> auto-select the first completion item and notify coc.nvim to
" format on enter, <cr> could be remapped by other vim plugin
inoremap <silent><expr> <cr> pumvisible() ? coc#_select_confirm()
                              \: "\<C-g>u\<CR>\<c-r>=coc#on_enter()\<CR>"

" Use `[g` and `]g` to navigate diagnostics
" Use `:CocDiagnostics` to get all diagnostics of current buffer in location list.
nmap <silent> [g <Plug>(coc-diagnostic-prev)
nmap <silent> ]g <Plug>(coc-diagnostic-next)

" GoTo code navigation.
nmap <silent> gd <Plug>(coc-definition)
nmap <silent> gy <Plug>(coc-type-definition)
nmap <silent> gi <Plug>(coc-implementation)
nmap <silent> gr <Plug>(coc-references)

" Use K to show documentation in preview window.
nnoremap <silent> K :call <SID>show_documentation()<CR>

function! s:show_documentation()
  if (index(['vim','help'], &filetype) >= 0)
    execute 'h '.expand('<cword>')
  elseif (coc#rpc#ready())
    call CocActionAsync('doHover')
  else
    execute '!' . &keywordprg . " " . expand('<cword>')
  endif
endfunction

" Highlight the symbol and its references when holding the cursor.
autocmd CursorHold * silent call CocActionAsync('highlight')

" Symbol renaming.
nmap <leader>rn <Plug>(coc-rename)

" Formatting selected code.
xmap <leader>f  <Plug>(coc-format-selected)
nmap <leader>f  <Plug>(coc-format-selected)

augroup mygroup
  autocmd!
  " Setup formatexpr specified filetype(s).
  autocmd FileType typescript,json setl formatexpr=CocAction('formatSelected')
  " Update signature help on jump placeholder.
  autocmd User CocJumpPlaceholder call CocActionAsync('showSignatureHelp')
augroup end


" Applying codeAction to the selected region.
" Example: `<leader>aap` for current paragraph
xmap <leader>a  <Plug>(coc-codeaction-selected)
nmap <leader>a  <Plug>(coc-codeaction-selected)

" Remap keys for applying codeAction to the current buffer.
nmap <leader>ac  <Plug>(coc-codeaction)
" Apply AutoFix to problem on the current line.
nmap <leader>qf  <Plug>(coc-fix-current)

" Map function and class text objects
" NOTE: Requires 'textDocument.documentSymbol' support from the language server.
xmap if <Plug>(coc-funcobj-i)
omap if <Plug>(coc-funcobj-i)
xmap af <Plug>(coc-funcobj-a)
omap af <Plug>(coc-funcobj-a)
xmap ic <Plug>(coc-classobj-i)
omap ic <Plug>(coc-classobj-i)
xmap ac <Plug>(coc-classobj-a)
omap ac <Plug>(coc-classobj-a)

" Remap <C-f> and <C-b> for scroll float windows/popups.
if has('nvim-0.4.0') || has('patch-8.2.0750')
  nnoremap <silent><nowait><expr> <C-f> coc#float#has_scroll() ? coc#float#scroll(1) : "\<C-f>"
  nnoremap <silent><nowait><expr> <C-b> coc#float#has_scroll() ? coc#float#scroll(0) : "\<C-b>"
  inoremap <silent><nowait><expr> <C-f> coc#float#has_scroll() ? "\<c-r>=coc#float#scroll(1)\<cr>" : "\<Right>"
  inoremap <silent><nowait><expr> <C-b> coc#float#has_scroll() ? "\<c-r>=coc#float#scroll(0)\<cr>" : "\<Left>"
  vnoremap <silent><nowait><expr> <C-f> coc#float#has_scroll() ? coc#float#scroll(1) : "\<C-f>"
  vnoremap <silent><nowait><expr> <C-b> coc#float#has_scroll() ? coc#float#scroll(0) : "\<C-b>"
endif

" Use CTRL-S for selections ranges.
" Requires 'textDocument/selectionRange' support of language server.
nmap <silent> <C-s> <Plug>(coc-range-select)
xmap <silent> <C-s> <Plug>(coc-range-select)

" Add `:Format` command to format current buffer.
command! -nargs=0 Format :call CocAction('format')

" Add `:Fold` command to fold current buffer.
command! -nargs=? Fold :call     CocAction('fold', <f-args>)

" Add `:OR` command for organize imports of the current buffer.
command! -nargs=0 OR   :call     CocAction('runCommand', 'editor.action.organizeImport')

" Mappings for CoCList
" Show all diagnostics.
nnoremap <silent><nowait> <space>a  :<C-u>CocList diagnostics<cr>
" Manage extensions.
nnoremap <silent><nowait> <space>e  :<C-u>CocList extensions<cr>
" Show commands.
nnoremap <silent><nowait> <space>c  :<C-u>CocList commands<cr>
" Find symbol of current document.
nnoremap <silent><nowait> <space>o  :<C-u>CocList outline<cr>
" Search workspace symbols.
nnoremap <silent><nowait> <space>s  :<C-u>CocList -I symbols<cr>
" Do default action for next item.
nnoremap <silent><nowait> <space>j  :<C-u>CocNext<CR>
" Do default action for previous item.
nnoremap <silent><nowait> <space>k  :<C-u>CocPrev<CR>
" Resume latest coc list.
nnoremap <silent><nowait> <space>p  :<C-u>CocListResume<CR>

# default installed coc extensions
let g:coc_global_extensions = [
    \'coc-emoji',
    \'coc-git',
    \'coc-highlight',
    \'coc-json',
    \'coc-markdownlint',
    \'coc-marketplace',
    \'coc-pyright',
    \'coc-rust-analyzer',
    \'coc-sh',
    \'coc-texlab',
    \'coc-yaml',
    \'coc-go',
    \]

" vim: set ft=vim ts=4 sw=4 tw=78 et :
